repo = {
  '0': 'https://raw.githubusercontent.com/kyle1an/SF-1/main',
  '1': 'https://cdn.jsdelivr.net/gh/kyle1an/SF-1@main',
  '2': 'https://cdn.jsdelivr.net/gh/kyle1an/SF-Fonts@master',
};
$link = repo['2'];
// @formatter:off
$generalUnicode = U+0000-024F, U+02B0-052F, U+1DC0-20CF, U+2190-22FF, U+2460-24FF, U+25A0-25FF, U+2700-27FF, U+2900-2BFF, U+2C60-2C7F, U+2DE0-2E7F, U+3200-32FF, U+A640-A69F, U+A700-A7FF, U+E000-F8FF, U+FFF0-FFFF, U+F0000-10FFFF;
$plusUnicode = U+0250-02AF, U+1D00-1DBF, U+2190-22FF;
// @formatter:on
$monoUnicode = $generalUnicode, $plusUnicode;
$textFamilies = 'SF Pro Text', 'SF Pro Display', Akzidenz, AlibabaPuHuiTi, 'Arial', arial, 'Arial Unicode MS', Arimo, Avenir, 'Benton Sans', 'Crisp Noto Sans Regular', Content-font, CustomSansSerif, 'dosis', font-regular, Geneva, gitbook-content-font, Helvetica, 'Helvetica Neue', HelveticaNeue, HelveticaNowDisplay-Regular, 'Helvetica Neue For Number', 'HelveticaNeue-Medium', 'HelveticaNeue-Bold', Hind, Inter, 'Lantinghei SC', lato, 'Lucida Grande', muli, mwf-segoeui-web, Noto, 'Noto Sans', 'Noto Sans SC', 'Noto Sans TC', 'Open Sans', opensans, 'PingFang SC', '.PingFang SC', 'PingFangSC', 'PingFang SC Light', 'PingFangSC-Light', 'PingFangSC-Regular', 'PingFangSC-Medium', 'PingFangSC-Semibold', 'pt sans', Roboto, Roboto-Light, Roboto-Regular, Roboto-Medium, sans-serif, 'Segoe UI Web (West European)', 'Segoe UI', SegoeUI, '-apple-system', 'Source Han Sans CN', 'source sans pro', system-ui, Tahoma, 'Times New Roman', 'Trebuchet MS', 'Ubuntu Light', Ubuntu, Verdana, 'wf_segoe-ui', Whitney, '方正仿宋_gbk', '宋体', '微軟正黑體', '微软雅黑', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft Yahei';
// /* ──────── Fira Mono, IBM Plex Mono ui-monospace */
$monoFamilies = 'SF Mono', 'SFMono-Regular', 'Cascadia Mono-SemiLight', Consolas, Courier, 'courier new', 'DejaVu Sans Mono', docs-Consolas, gitbook-code-font, Menlo, Meslo, Monaco, Monospace, monospaced, 'Roboto Mono', 'Source Code Pro', 'source-code-pro', 'SourceCodePro', 'PT Mono', Ubuntu Mono;
$boldFamilies = 'Arial Black', HelveticaNowDisplay-XBd;
$compactFamilies = 'SF Compact Text', Mulish;
$boldWeights = { Semibold: 600, Bold: 700 };
$usualWeights = merge({ Light: 300, Regular: 400, Medium: 500 }, $boldWeights);
$allWeights = merge({ Thin: 200 }, $usualWeights);
$textFonts = {
  families: $textFamilies,
  weight: $allWeights,
  unicode: $generalUnicode,
  dir: '/Fonts/SF-Pro-Text-',
  src: @(dir, weight, style) {
    /* local('SF Pro Text '+ weight + (style == 'Italic'? ' Italic':''))  \, */
    src_url(dir, weight, style);
  }
};
$monoFonts = {
  families: $monoFamilies,
  weight: $usualWeights,
  unicode: $monoUnicode,
  dir: '/Fonts/SF-Mono-',
  src: @(dir, weight, style) {
    $fStyle = style == 'italic' ? ' Italic' : '';
    local('SF Mono ' + weight + $fStyle) \, src_url(dir, weight, style);
  }
};
$boldFonts = {
  families: $boldFamilies,
  weight: $boldWeights,
  unicode: $generalUnicode,
  dir: '/Fonts/SF-Pro-Text-',
  src: @(dir, weight, style) {
    src_url(dir, 'Bold', style);
  }
};
$compactFonts = {
  families: $compactFamilies,
  weight: $allWeights,
  unicode: $generalUnicode,
  dir: '/Fonts/SF-Compact-Text-',
  src: @(dir, weight, style) {
    fStyle = style == 'italic' ? ' Italic' : '';
    local('SF Compact Text ' + weight + fStyle) \, src_url(dir, weight, style);
  }
};

loadFonts(f) {
  srcFn = f.src;

  for familiy in f[families] {
    for weightName, weightNum in f[weight] {
      for style in normal italic {
        @font-face {
          font-family: familiy;
          src: srcFn(f[dir], weightName, style);
          unicode-range: f[unicode];
          font-weight: weightNum;
          font-style: style;
          font-display: swap;
        }
      }
    }
  }
}

src_url(dir, weight, style, ext = 'otf', format = 'OpenType') {
  i = style == 'italic' ? 'Italic':'';
  url($link + dir + weight + i + '.' + ext) format(format);
}

loadFonts($textFonts);
loadFonts($boldFonts);
loadFonts($monoFonts);
loadFonts($compactFonts);
// @formatter:off
$zhUnicode = U+4E00-9FFF, U+3400-4DBF, U+20000-2A6DF, U+F900-FAFF, U+2F800-2FA1F;
// U+2A700–2B73F, U+2B740–2B81F, U+2B820–2CEAF,
// @formatter:on
$zhFamilies = '宋体', '微軟正黑體', '微软雅黑', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft Yahei';
zh_f = { families: $zhFamilies, weight: $allWeights, unicode: $zhUnicode, dir: '/Fonts/SF-Pro-Text-' };

for font-name in zh_f[families] {
  @font-face {
    font-family: font-name;
    src: local(font-name);
    unicode-range: zh_f[unicode];
    font-display: swap;
  }
}

@font-face {
  font-family: 'XcodeDigits';
  src: local('Xcode Digits Regular'), url('https://cdn.jsdelivr.net/gh/kyle1an/SF-Fonts@master/Fonts/XcodeDigits-regular.ttf');
  // @formatter:off
  unicode-range: U+0030-0039 ;
  // @formatter:on
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

// * {
// -moz-font-feature-settings: "smcp";
// -webkit-font-feature-settings: "tnum"  !important;
// 	font-feature-settings: 'cv01', 'ss01'0, 'ss02', 'cv02'0, 'cv03', 'cv05', 'cv06'0, 'ss07'0, 'cv07'0, 'cv08', 'trad'0, 'nlck', 'nalt'0, 'ital', 'ss03'0, 'ss04';
// }

// "cv01",  "Straight-sided nine"; 6 9. [six six.tnum] by [six.1 six.1.tnum];
// "ss01",  sub [six nine six.tnum nine.tnum] by [six.1 nine.1 six.1.tnum nine.1.tnum];
// "ss02",  "Open four"; 4
// "cv02",
// "cv03",  "Vertically centered colon"; : and J
// "cv05",  "Seriffed Capital I";
// "cv06",  "Tailed lowercase l";
// "ss07",  "One storey a";
// "cv07",
// "cv08",  "Slashed zero"; 0 and Chinese
// "trad",
// "nlck",
// "nalt",
// "ital",
// "tnum",
// "ss03",  -- Mono "Alternate 0 no slash";
// "ss04";   "Alternate 1 no serif";;
// // font-feature-settings: "ss03" !important;
// // font-feature-settings: "dnom" !important;

/*
feature cv01 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "6";
    }
    SampleTextNameID{
      name "Straight-sided nine";
    };
  };
  sub [six six.tnum] by [six.1 six.1.tnum];

} cv01;


feature cv02 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "9";
    };
    SampleTextNameID{
      name "Open four";
    };
  };
  sub [nine nine.tnum] by [nine.1 nine.1.tnum];

} cv02;

feature cv03 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "4";
    };
    SampleTextNameID{
      name "Vertically centered colon";
    };
  };
  sub [four four.tnum] by [four.1 four.1.tnum];

} cv03;


feature cv04 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "Open four";
    };
    SampleTextNameID{
      name "Vertically centered colon";
    };
  };
  lookup calt_case_cv04_ss03;

} cv04;


feature cv05 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "9:41";
    };
    SampleTextNameID{
      name "Seriffed Capital I";
    };
  };
  sub @cv05 by @cv052;

} cv05;


feature cv06 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "I";
    };
    SampleTextNameID{
      name "Tailed lowercase l";
    };
  };
  sub @cv06 by @cv062;

} cv06;


feature cv07 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "l";
    };
    SampleTextNameID{
      name "One storey a";
    };
  };
  sub @cv07_ss07 by @cv07_ss072;

} cv07;


feature cv08 {
# GSUB
# Lookups: 1

  cvParameters{
    FeatUILabelNameID{
      name "a";
    };
    SampleTextNameID{
      name "Slashed zero";
    };
  };
  sub [zero zero.tnum zero.dnum zero.numr] by [zero.1 zero.1.tnum zero.1.dnum zero.1.numr];
  sub [uni2080 uni2070 zero.sc] by [zero.1.subs zero.1.sups zero.1.sc];

} cv08;


feature cv09 {
# GSUB
# Lookups: 1

  sub [dollar cent] by [dollar.1 cent.1];

} cv09;


feature cv10 {
# GSUB
# Lookups: 1

  sub [dollar dollar.1] by [dollar.3 dollar.2];

} cv10;

*/
